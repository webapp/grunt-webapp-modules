### Command-line interface ###

Baked into the modules task are a set of related tasks that are specific to
working with an optimizer that generates a dependency graph.

#### List ####

This is a very basic task that simply traverses your project and will print
out all modules and their dependencies.  A nice way to quickly glance over the
size of your project.

#### Lookup ####

This will return known information about a specific module: its dependencies,
dependants, and whether or not it's orphaned.

``` bash
grunt lookup
```

#### Orphaned ####

This will list all modules that will never be built because they are never
required by any other module.  This are usually safe to remove.

A useful bash command to remove all orphaned modules:

``` bash
grunt orphaned | xargs rm
```


  grunt.registerTask("list", "Show module dependencies.", function(prop) {
    var options = grunt.config("modules") || {};
    var baseUrl = options.baseUrl || "app";
    var done = this.async();
    var exports = {};
    
    exports.init = function(grunt) {
      var exports = {};
      var _ = grunt.util._;

      exports.list = function(appDir, done) {
        var jsRegExp = /\.js$/;

        requirejs.tools.useLib(function(require) {
          require(["parse", "commonJs"], function(parse, commonJs) {
            var deps = {};
            var files = [];

            // Recursively find all files inside the application directory
            function recurse(dir) {
              fs.readdirSync(dir).forEach(function(name) {
                var subdir = path.resolve(dir, name);
                var stats = fs.statSync(subdir);
                
                if (stats.isDirectory()) {
                  recurse(subdir);
                } else if (jsRegExp.test(name)) {
                  files.push(subdir);
                }
              });
            }

            // Start with the app directory e.g. app/
            recurse(appDir);

            files.forEach(function(name) {
              var contents = fs.readFileSync(name, "utf8");
              var shortname = name.slice(name.indexOf(appDir));
              var dep, all;

              if (options.es6) {
                // Convert from ES6.
                contents = new Compiler(contents, moduleName.slice(-2, 0)).toAMD();
              } else {
                // Convert from CommonJS.
                contents = commonJs.convert(name, contents);
              }

              try {
                dep = parse.findDependencies(name, contents);
              } catch (ex) {
                console.log(ex);
              }

              if (dep && dep.length) {
                all = deps[shortname] = parse.findDependencies(name, contents);

                // Remove `require`, `module`, `exports`.
                all.splice(all.indexOf("require"), 1);
                all.splice(all.indexOf("module"), 1);
                all.splice(all.indexOf("exports"), 1);
              }
            });
            
            console.log(exports.tree(deps));
            done();
          });
        });
      };

      exports.tree = function(obj) {
        var tree = [""];

        function spaces(len, end, start) {
          start = start || " ";
          end = end || " ";

          if (!start) {
            return Array(len+1).join(Array(3).join(end));
          } else {
            return Array(len+1).join(start + Array(2).join(end));
          }
        }

        function traverse(obj, depth) {
          _.each(obj, function(val, key) {
            var len;

            if (_.isArray(val)) {
              tree.push("\u251c" + spaces(depth) + " " + key);

              len = val.length;

              _.each(val, function(val, i) {
                if (_.isString(val)) {
                  if (i == len-1) {
                    tree.push("\u2502 " + spaces(depth+1, "\u2500", "\u2514") + " "
                      + val);
                  } else {
                    tree.push("\u2502 " + spaces(depth+1, "\u2500", "\u251c") + " "
                      + val);
                  }
                } else if (_.isObject(val)) {
                  traverse(obj, depth+1);
                }
              });

              tree.push("\u2502");

            } else if (_.isObject(val)) {
              tree.push(spaces(depth) + key);
              traverse(val, depth+1);
            } else {
              tree.push(spaces(depth) + key);
            }

          });
        }

        traverse(obj, 0);

        tree.pop();

        return tree.join("\n");
      };

      return exports;
    };

    exports.init(grunt).list(path.normalize(baseUrl + "/"), done);
  });
